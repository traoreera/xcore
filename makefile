# ============================================================
# üìå Variables globales
# ============================================================
PROJECT_PATH_APP := $(shell pwd)/core
PROJECT_PATH := $(shell pwd)
LOGS_FILE := $(shell pwd)/logs/dev.log


# Variables pour gestion liens symboliques
FROM ?= /path/to/module.py     # Source du module (fichier ou dossier)
TO ?=  $(shell pwd)/backgroundtask           # Dossier destination
NAME ?= module.py              # Nom du lien symbolique

# Variables pour gestion plugins
PLUGIN_NAME ?= myplugin
AUTHOR ?= traoreera
PLUGIN_REPO ?= http://github.com/$(AUTHOR)/$(PLUGIN_NAME).git
PLUGIN_DIR := plugins/$(PLUGIN_NAME)


# ============================================================
# üìö Commande HELP - Affiche toutes les commandes disponibles
# ============================================================
help: ## Afficher la liste des commandes disponibles et leur usage
	@echo "üìö Liste des commandes disponibles :"
	@grep -E '^[a-zA-Z0-9_-]+:.*?## .*$$' $(MAKEFILE_LIST) \
		| sort \
		| awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'

# ============================================================
# üîß Gestion des plugins (git + liens symboliques)
# ============================================================

add-plugin: ## Ajouter ou mettre √† jour un plugin git et lier les t√¢ches dans backgroundtask
	@if [ -z "$(PLUGIN_NAME)" ]; then \
		echo "‚ùå Erreur : veuillez fournir PLUGIN_NAME"; \
		echo "   Exemple : make add-plugin PLUGIN_NAME=presence"; \
		exit 1; \
	fi
	@if [ -z "$(PLUGIN_REPO)" ]; then \
		echo "‚ö†Ô∏è PLUGIN_REPO non d√©fini, utilisation par d√©faut git@github.com:tonrepo/$(PLUGIN_NAME).git"; \
		export PLUGIN_REPO=git@github.com:tonrepo/$(PLUGIN_NAME).git; \
	fi
	@if [ ! -d "$(PLUGIN_DIR)" ]; then \
		echo "üì• Clonage du plugin $(PLUGIN_NAME) depuis $(PLUGIN_REPO)..."; \
		git clone "$(PLUGIN_REPO)" "$(PLUGIN_DIR)" || { echo "‚ùå √âchec du clonage"; exit 1; }; \
	else \
		echo "‚¨ÜÔ∏è Mise √† jour du plugin $(PLUGIN_NAME)..."; \
		cd "$(PLUGIN_DIR)" && git pull || { echo "‚ùå √âchec de la mise √† jour"; exit 1; }; \
	fi

rm-plugin: ## Suprime un plugin
	@if [ -z "$(PLUGIN_NAME)" ]; then \
		echo "‚ùå Erreur : veuillez fournir PLUGIN_NAME"; \
		echo "   Exemple : make rm-plugin PLUGIN_NAME=presence"; \
		exit 1; \
	fi
	@if [ ! -d "$(PLUGIN_DIR)" ]; then \
		echo "‚ö†Ô∏è  Plugin $(PLUGIN_NAME) introuvable"; \
	else \
		echo "üóë Suppression du plugin $(PLUGIN_NAME)..."; \
		rm -rf "$(PLUGIN_DIR)" || { echo "‚ùå √âchec de la suppression"; exit 1; }; \
		echo "‚úÖ Plugin $(PLUGIN_NAME) supprim√©"; \
	fi

# ============================================================
# üîó Cr√©ation / suppression de liens symboliques
# ============================================================

link: ## Cr√©er un lien symbolique (usage: make link FROM=source TO=destination NAME=nom_lien)
	@if [ -z "$(FROM)" ] || [ -z "$(TO)" ] || [ -z "$(NAME)" ]; then \
		echo "‚ùå Erreur : il faut fournir FROM, TO et NAME"; \
		echo "   Exemple : make link FROM=./plugins/presence/task/presence_task.py TO=./backgroundtask NAME=presence.py"; \
		exit 1; \
	fi
	@if [ ! -f "$(FROM)" ]; then \
		echo "‚ùå Fichier source '$(FROM)' introuvable."; \
		exit 1; \
	fi
	@echo "üîó Cr√©ation du lien symbolique $(TO)/$(NAME) vers $(FROM)..."
	@if [ ! -d "$(TO)" ]; then \
		echo "üìÇ Cr√©ation du dossier $(TO)"; \
		mkdir -p "$(TO)"; \
	fi

	@ln -sf "$(PROJECT_PATH)/$(FROM)" "$(TO)/$(NAME)"
	@echo "‚úÖ Liens cr√©√©s :"
	@echo "   $(TO)/$(NAME)"

unlink: ## Supprimer un lien symbolique (usage: make unlink TO=dossier NAME=nom_fichier)
	@echo "üóë Suppression du lien symbolique $(TO)/$(NAME)..."
	@if [ -L "$(TO)/$(NAME)" ]; then \
		rm "$(TO)/$(NAME)"; \
		echo "‚úÖ Lien supprim√© : $(TO)/$(NAME)"; \
	else \
		echo "‚ö†Ô∏è Aucun lien trouv√© pour $(TO)/$(NAME)"; \
	fi

# ============================================================
# üßπ Nettoyage fichiers Python compil√©s
# ============================================================

clean: ## Supprimer __pycache__ et fichiers *.pyc, *.pyo
	@echo "üßπ Nettoyage des fichiers inutiles..."
	@find . -type d -name "__pycache__" -exec rm -rf {} +
	@find . -type f \( -name "*.backup" -o -name "*.backup" \) -exec rm -f {} +
	@find . -type f \( -name "*.pyc" -o -name "*.pyo" \) -exec rm -f {} +

# ============================================================
# üì¶ Installation & initialisation projet
# ============================================================

install: ## Installer les d√©pendances Python via Poetry
	@poetry lock
	@poetry install

init: ## Initialiser le projet (permissions scripts + install + d√©marrage dev)
	@chmod +x ./script/uninstall.sh
	@chmod +x ./script/install.sh
	@chmod +x ./script/cmd.sh
	@chmod +x ./script/repaire_ng.sh
	@chmod +x ./script/restart_poetry.sh
	$(MAKE) install
	$(MAKE) run-dev

# ============================================================
# üöÄ Lancement de l'application
# ============================================================

run-dev: ## Lancer en mode d√©veloppement (reload automatique)
	@echo "üöÄ Lancement en mode d√©veloppement..."
	@poetry run python -m uvicorn main:app --reload --host 0.0.0.0 --port 8082

run-st: ## Lancer en mode production / statique (sans reload)
	@echo "üöÄ Lancement en mode statique..."
	@poetry run python -m uvicorn main:app --host 0.0.0.0 --port 8081

testing: ## Installer pip sans cache (debug)
	@echo "üì¶ Installation pip sans cache..."
	@poetry run python -m uvicorn test:app --reload --host 0.0.0.0 --port 8082

# ============================================================
# üì¶ D√©ploiement & gestion serveur
# ============================================================

deploy: ## D√©ployer l'application (script externe)
	@./script/install.sh

remove-app: ## Supprimer l'application (script externe)
	@./script/uninstall.sh

repaire-ng: ## R√©parer la configuration Nginx
	@./script/repaire_ng.sh

start: ## D√©marrer le serveur (script externe)
	@./script/cmd.sh start

stop: ## Arr√™ter le serveur (script externe)
	@./script/cmd.sh stop

restart: ## Red√©marrer le serveur (script externe)
	@./script/cmd.sh restart

status: ## V√©rifier le statut du serveur (script externe)
	@./script/cmd.sh status

poetry-ri: ## Red√©marrer Poetry (script externe)
	@./script/restart_poetry.sh


# ============================================================
# üìå Cibles "PHONY" - √©viter conflits avec fichiers du m√™me nom
# ============================================================

.PHONY: help add-plugin link unlink clean install init run-dev run-st pip-Noa deploy remove-app repaire-ng start stop restart status poetry-ri pre-commit logs logs-live logs-debug logs-info logs-warning logs-error logs-critical logs-auth logs-db logs-api logs-plugins logs-tasks logs-email logs-clean logs-stats logs-search logs-today logs-last-hour logs-test logs-demo

# ============================================================
# üìä Commandes de gestion des logs
# ============================================================

logs: ## Afficher tous les logs du fichier $(LOGS_FILE)
	@echo "üìã Affichage de tous les logs..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		tail -100 $(LOGS_FILE); \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-live: ## Afficher les logs en temps r√©el (tail -f)
	@echo "üî¥ Logs en temps r√©el (Ctrl+C pour arr√™ter)..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		tail -f $(LOGS_FILE); \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-debug: ## Filtrer et afficher seulement les logs DEBUG
	@echo "üîç Logs DEBUG..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "DEBUG" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-info: ## Filtrer et afficher seulement les logs INFO
	@echo "‚ÑπÔ∏è  Logs INFO..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "INFO" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-warning: ## Filtrer et afficher seulement les logs WARNING
	@echo "‚ö†Ô∏è  Logs WARNING..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "WARNING" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-error: ## Filtrer et afficher seulement les logs ERROR
	@echo "‚ùå Logs ERROR..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "ERROR" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-critical: ## Filtrer et afficher seulement les logs CRITICAL
	@echo "üö® Logs CRITICAL..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "CRITICAL" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-auth: ## Filtrer les logs li√©s √† l'authentification
	@echo "üîê Logs d'authentification..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(auth|login|token|otp|session)" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-db: ## Filtrer les logs li√©s √† la base de donn√©es
	@echo "üóÉÔ∏è  Logs de base de donn√©es..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(database|session|CRUD|commit|rollback)" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-api: ## Filtrer les logs li√©s aux routes/API
	@echo "üõ£Ô∏è  Logs des routes API..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(routes|router|API|endpoint)" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-plugins: ## Filtrer les logs li√©s aux plugins
	@echo "üîå Logs des plugins..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(plugin|Plugin)" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-tasks: ## Filtrer les logs li√©s aux t√¢ches
	@echo "üìã Logs des t√¢ches..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(task|TaskManager|thread|service)" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-email: ## Filtrer les logs li√©s aux emails
	@echo "üìß Logs des emails..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(email|smtp|mail)" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-clean: ## Nettoyer/vider le fichier de logs
	@echo "üßπ Nettoyage du fichier de logs..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		echo "üìÅ Sauvegarde de $(LOGS_FILE) vers $(LOGS_FILE).old"; \
		cp $(LOGS_FILE) $(LOGS_FILE).old; \
		echo "" > $(LOGS_FILE); \
		echo "‚úÖ Fichier $(LOGS_FILE) nettoy√© (sauvegarde dans $(LOGS_FILE).old)"; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-stats: ## Afficher les statistiques des logs
	@echo "üìä Statistiques des logs..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		echo "üìã Nombre total de lignes: $$(wc -l < $(LOGS_FILE))"; \
		echo "üîç DEBUG: $$(grep -c 'DEBUG' $(LOGS_FILE) || echo 0)"; \
		echo "‚ÑπÔ∏è  INFO: $$(grep -c 'INFO' $(LOGS_FILE) || echo 0)"; \
		echo "‚ö†Ô∏è  WARNING: $$(grep -c 'WARNING' $(LOGS_FILE) || echo 0)"; \
		echo "‚ùå ERROR: $$(grep -c 'ERROR' $(LOGS_FILE) || echo 0)"; \
		echo "üö® CRITICAL: $$(grep -c 'CRITICAL' $(LOGS_FILE) || echo 0)"; \
		echo ""; \
		echo "üïê Derni√®re entr√©e: $$(tail -1 $(LOGS_FILE) | cut -d' ' -f1-2 || echo 'N/A')"; \
		echo "üìè Taille du fichier: $$(du -h $(LOGS_FILE) | cut -f1)"; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-search: ## Rechercher dans les logs (usage: make logs-search TERM="texte_recherche")
	@if [ -z "$(TERM)" ]; then \
		echo "‚ùå Erreur : veuillez fournir un terme de recherche"; \
		echo "   Exemple : make logs-search TERM='utilisateur'"; \
		exit 1; \
	fi
	@echo "üîç Recherche de '$(TERM)' dans les logs..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -i "$(TERM)" $(LOGS_FILE) | tail -30; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-today: ## Afficher les logs d'aujourd'hui
	@echo "üìÖ Logs d'aujourd'hui..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "$$(date '+%Y-%m-%d')" $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-last-hour: ## Afficher les logs de la derni√®re heure
	@echo "üïê Logs de la derni√®re heure..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		awk -v hour="$$(date -d '1 hour ago' '+%Y-%m-%d %H')" '$$0 >= hour' $(LOGS_FILE) | tail -50; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi


logs-test: ## G√©n√©rer des logs de test pour d√©monstration
	@echo "üß™ G√©n√©ration de logs de test..."
	@python3 generate_test_logs.py

logs-demo: ## D√©monstration compl√®te du syst√®me de logs
	@echo "üé≠ D√©monstration compl√®te du syst√®me de logging..."
	@echo ""
	@$(MAKE) logs-test
	@echo ""
	@echo "üìä Statistiques:"
	@$(MAKE) logs-stats
	@echo ""
	@echo "‚ùå Erreurs d√©tect√©es:"
	@$(MAKE) logs-error
	@echo ""
	@echo "‚ö†Ô∏è  Avertissements:"
	@$(MAKE) logs-warning
	@echo ""
	@echo "üîê Logs d'authentification:"
	@$(MAKE) logs-auth

# ============================================================
# üîÑ Commandes combin√©es pour workflows avanc√©s
# ============================================================

logs-errors-and-warnings: ## Afficher les erreurs ET les warnings ensemble
	@echo "üö® Analyse compl√®te : ERREURS + AVERTISSEMENTS"
	@echo "=================================================="
	@echo ""
	@echo "‚ùå ERREURS R√âCENTES:"
	@echo "-------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "ERROR" $(LOGS_FILE) | tail -20; \
	fi
	@echo ""
	@echo "‚ö†Ô∏è  AVERTISSEMENTS R√âCENTS:"
	@echo "-------------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "WARNING" $(LOGS_FILE) | tail -20; \
	fi
	@echo ""
	@echo "üìä R√âSUM√â:"
	@if [ -f "$(LOGS_FILE)" ]; then \
		echo "‚ùå Total erreurs: $$(grep -c 'ERROR' $(LOGS_FILE) || echo 0)"; \
		echo "‚ö†Ô∏è  Total warnings: $$(grep -c 'WARNING' $(LOGS_FILE) || echo 0)"; \
	fi

logs-security-audit: ## Audit de s√©curit√© complet (auth + erreurs + warnings)
	@echo "üõ°Ô∏è  AUDIT DE S√âCURIT√â COMPLET"
	@echo "=============================="
	@echo ""
	@echo "üîê AUTHENTIFICATION:"
	@echo "-------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(auth|login|token|otp|session)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "‚ùå ERREURS DE S√âCURIT√â:"
	@echo "----------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ERROR.*auth|ERROR.*login|ERROR.*token)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "‚ö†Ô∏è  TENTATIVES SUSPECTES:"
	@echo "------------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(WARNING.*auth|WARNING.*login|√âchec|√©chec|Invalid|invalid)" $(LOGS_FILE) | tail -10; \
	fi

logs-performance-check: ## V√©rification des performances (warnings + tasks + timing)
	@echo "‚ö° V√âRIFICATION DES PERFORMANCES"
	@echo "==============================="
	@echo ""
	@echo "‚ö†Ô∏è  ALERTES DE PERFORMANCE:"
	@echo "--------------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(lente|slow|timeout|performance|CPU|m√©moire|memory)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "üìã √âTAT DES T√ÇCHES:"
	@echo "------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(task|TaskManager|thread|service)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "‚è±Ô∏è  TEMPS D'EX√âCUTION:"
	@echo "---------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ex√©cut√© en|ms|secondes)" $(LOGS_FILE) | tail -10; \
	fi

logs-startup-analysis: ## Analyse compl√®te du d√©marrage de l'application
	@echo "üöÄ ANALYSE DU D√âMARRAGE"
	@echo "======================"
	@echo ""
	@echo "üîß INITIALISATION:"
	@echo "-----------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(D√©marrage|initialis√©|charg√©|startup)" $(LOGS_FILE) | tail -20; \
	fi
	@echo ""
	@echo "‚ùå ERREURS AU D√âMARRAGE:"
	@echo "-----------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ERROR.*init|ERROR.*startup|ERROR.*D√©marrage)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "üîå CHARGEMENT DES PLUGINS:"
	@echo "-------------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(Plugin.*charg√©|plugin.*initialis√©)" $(LOGS_FILE) | tail -10; \
	fi

logs-user-activity: ## Activit√© des utilisateurs (connexions, actions, erreurs)
	@echo "üë• ACTIVIT√â DES UTILISATEURS"
	@echo "==========================="
	@echo ""
	@echo "üîê CONNEXIONS:"
	@echo "-------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(Tentative de connexion|Connexion r√©ussie|login)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "üö™ D√âCONNEXIONS:"
	@echo "---------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(D√©connexion|logout)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "üìù INSCRIPTIONS:"
	@echo "---------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(Inscription|register)" $(LOGS_FILE) | tail -10; \
	fi

logs-api-monitoring: ## Monitoring des API (routes + erreurs + performance)
	@echo "üõ£Ô∏è  MONITORING DES API"
	@echo "====================="
	@echo ""
	@echo "üìä ACC√àS AUX ROUTES:"
	@echo "-------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(GET|POST|DELETE|PUT)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "‚ùå ERREURS D'API:"
	@echo "----------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ERROR.*route|ERROR.*API|ERROR.*endpoint)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "‚è±Ô∏è  PERFORMANCE DES ROUTES:"
	@echo "--------------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ms|temps.*ex√©cution)" $(LOGS_FILE) | tail -10; \
	fi

logs-database-health: ## Sant√© de la base de donn√©es (connexions + erreurs + transactions)
	@echo "üóÉÔ∏è  SANT√â DE LA BASE DE DONN√âES"
	@echo "==============================="
	@echo ""
	@echo "üîó CONNEXIONS:"
	@echo "-------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(database.*√©tablie|Session.*cr√©√©e|DB)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "üíæ TRANSACTIONS:"
	@echo "---------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(commit|rollback|transaction)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "‚ùå ERREURS DE BASE:"
	@echo "------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ERROR.*database|ERROR.*DB|ERROR.*SQL)" $(LOGS_FILE) | tail -10; \
	fi

logs-plugins-status: ## √âtat complet des plugins (chargement + erreurs + activit√©)
	@echo "üîå √âTAT COMPLET DES PLUGINS"
	@echo "=========================="
	@echo ""
	@echo "üîß CHARGEMENT DES PLUGINS:"
	@echo "-------------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(Plugin.*charg√©|plugin.*initialis√©|Manager.*plugin)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "‚ö° ACTIVIT√â DES PLUGINS:"
	@echo "----------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(Plugin|plugin)" $(LOGS_FILE) | grep -E "(ajout√©|supprim√©|cr√©√©)" | tail -10; \
	fi
	@echo ""
	@echo "‚ùå ERREURS DE PLUGINS:"
	@echo "---------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ERROR.*plugin|ERROR.*Plugin)" $(LOGS_FILE) | tail -10; \
	fi

logs-email-monitoring: ## Monitoring complet des emails (envois + erreurs + SMTP)
	@echo "üìß MONITORING DES EMAILS"
	@echo "======================="
	@echo ""
	@echo "üìÆ ENVOIS D'EMAILS:"
	@echo "------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(Envoi d'email|email.*envoy√©|email.*succ√®s)" $(LOGS_FILE) | tail -15; \
	fi
	@echo ""
	@echo "üîß CONNEXIONS SMTP:"
	@echo "------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(SMTP|smtp)" $(LOGS_FILE) | tail -10; \
	fi
	@echo ""
	@echo "‚ùå ERREURS D'EMAIL:"
	@echo "------------------"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep -E "(ERROR.*email|ERROR.*SMTP|ERROR.*mail)" $(LOGS_FILE) | tail -10; \
	fi

logs-full-report: ## Rapport complet (stats + erreurs + warnings + s√©curit√©)
	@echo "üìã RAPPORT COMPLET DU SYST√àME"
	@echo "============================="
	@echo ""
	@$(MAKE) logs-stats
	@echo ""
	@echo "üö® PROBL√àMES D√âTECT√âS:"
	@echo "====================="
	@$(MAKE) logs-errors-and-warnings
	@echo ""
	@echo "üõ°Ô∏è  AUDIT S√âCURIT√â:"
	@echo "=================="
	@$(MAKE) logs-security-audit

logs-troubleshoot: ## Guide de d√©pannage automatique
	@echo "üîß GUIDE DE D√âPANNAGE AUTOMATIQUE"
	@echo "================================="
	@echo ""
	@echo "üìä 1. STATISTIQUES G√âN√âRALES:"
	@$(MAKE) logs-stats
	@echo ""
	@echo "‚ùå 2. ERREURS R√âCENTES (5 derni√®res):"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "ERROR" $(LOGS_FILE) | tail -5; \
	fi
	@echo ""
	@echo "‚ö†Ô∏è  3. WARNINGS R√âCENTS (5 derniers):"
	@if [ -f "$(LOGS_FILE)" ]; then \
		grep "WARNING" $(LOGS_FILE) | tail -5; \
	fi
	@echo ""
	@echo "üîç 4. MODULES LES PLUS ACTIFS:"
	@if [ -f "$(LOGS_FILE)" ]; then \
		cut -d'-' -f3 $(LOGS_FILE) | sort | uniq -c | sort -nr | head -5; \
	fi
	@echo ""
	@echo "üí° SUGGESTIONS:"
	@echo "- Si beaucoup d'erreurs ‚Üí make logs-error"
	@echo "- Si probl√®me de connexion ‚Üí make logs-auth"
	@echo "- Si lenteur ‚Üí make logs-performance-check"
	@echo "- Si probl√®me plugin ‚Üí make logs-plugins-status"

logs-debug-session: ## Session de debug interactive
	@echo "üîç SESSION DE DEBUG INTERACTIVE"
	@echo "==============================="
	@echo ""
	@echo "üìã Choisissez votre analyse:"
	@echo "1. Erreurs r√©centes       ‚Üí make logs-error"
	@echo "2. Probl√®mes d'auth       ‚Üí make logs-security-audit"
	@echo "3. Performance            ‚Üí make logs-performance-check"
	@echo "4. √âtat des plugins       ‚Üí make logs-plugins-status"
	@echo "5. Activit√© utilisateurs  ‚Üí make logs-user-activity"
	@echo "6. Sant√© de la DB         ‚Üí make logs-database-health"
	@echo "7. Rapport complet        ‚Üí make logs-full-report"
	@echo "8. Logs en temps r√©el     ‚Üí make logs-live"
	@echo ""
	@echo "üí° Exemple: make logs-security-audit"

logs-watch-errors: ## Surveillance continue des erreurs (toutes les 10 secondes)
	@echo "üëÄ SURVEILLANCE CONTINUE DES ERREURS"
	@echo "====================================="
	@echo "üîÑ Mise √† jour toutes les 10 secondes (Ctrl+C pour arr√™ter)"
	@echo ""
	@while true; do \
		clear; \
		echo "üïê $$(date '+%H:%M:%S') - Surveillance des erreurs"; \
		echo "=========================================="; \
		if [ -f "$(LOGS_FILE)" ]; then \
			echo "‚ùå ERREURS ($$(grep -c 'ERROR' $(LOGS_FILE) || echo 0)):"; \
			grep "ERROR" $(LOGS_FILE) | tail -5 || echo "Aucune erreur"; \
			echo ""; \
			echo "‚ö†Ô∏è  WARNINGS ($$(grep -c 'WARNING' $(LOGS_FILE) || echo 0)):"; \
			grep "WARNING" $(LOGS_FILE) | tail -3 || echo "Aucun warning"; \
		else \
			echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
		fi; \
		sleep 10; \
	done

logs-smart-filter: ## Filtre intelligent bas√© sur le contexte
	@echo "üß† FILTRE INTELLIGENT"
	@echo "===================="
	@echo ""
	@echo "üîç Analyse automatique du contexte..."
	@if [ -f "$(LOGS_FILE)" ]; then \
		ERROR_COUNT=$$(grep -c 'ERROR' $(LOGS_FILE) || echo 0); \
		WARNING_COUNT=$$(grep -c 'WARNING' $(LOGS_FILE) || echo 0); \
		CRITICAL_COUNT=$$(grep -c 'CRITICAL' $(LOGS_FILE) || echo 0); \
		echo "üìä Erreurs: $$ERROR_COUNT | Warnings: $$WARNING_COUNT | Critiques: $$CRITICAL_COUNT"; \
		echo ""; \
		if [ $$CRITICAL_COUNT -gt 0 ]; then \
			echo "üö® ALERTES CRITIQUES D√âTECT√âES!"; \
			echo "==============================="; \
			grep "CRITICAL" $(LOGS_FILE) | tail -10; \
		elif [ $$ERROR_COUNT -gt 10 ]; then \
			echo "‚ùå BEAUCOUP D'ERREURS D√âTECT√âES!"; \
			echo "==============================="; \
			grep "ERROR" $(LOGS_FILE) | tail -10; \
		elif [ $$WARNING_COUNT -gt 20 ]; then \
			echo "‚ö†Ô∏è  NOMBREUX AVERTISSEMENTS!"; \
			echo "==========================="; \
			grep "WARNING" $(LOGS_FILE) | tail -10; \
		else \
			echo "‚úÖ SYST√àME STABLE - Logs r√©cents:"; \
			echo "================================="; \
			tail -20 $(LOGS_FILE); \
		fi; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-timeline: ## Timeline des √©v√©nements importants
	@echo "üìÖ TIMELINE DES √âV√âNEMENTS"
	@echo "=========================="
	@echo ""
	@if [ -f "$(LOGS_FILE)" ]; then \
		echo "üïê DERNIERS √âV√âNEMENTS CRITIQUES:"; \
		echo "---------------------------------"; \
		grep -E "(CRITICAL|ERROR|D√©marrage|Arr√™t|startup|shutdown)" $(LOGS_FILE) | tail -15; \
		echo ""; \
		echo "üîê DERNI√àRES CONNEXIONS:"; \
		echo "------------------------"; \
		grep -E "(connexion|login|logout)" $(LOGS_FILE) | tail -10; \
		echo ""; \
		echo "üîå DERNI√àRES ACTIVIT√âS PLUGINS:"; \
		echo "-------------------------------"; \
		grep -E "(Plugin.*ajout√©|plugin.*charg√©)" $(LOGS_FILE) | tail -5; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-health-check: ## Check-up sant√© complet du syst√®me (PRO)
	@echo "üè• CHECK-UP SANT√â DU SYST√àME - VERSION PRO"
	@echo "========================================"
	@echo ""
	@if [ -f "$(LOGS_FILE)" ]; then \
		TOTAL_LINES=$$(wc -l < $(LOGS_FILE)); \
		ERROR_COUNT=$$(grep -c 'ERROR' $(LOGS_FILE) || echo 0); \
		WARNING_COUNT=$$(grep -c 'WARNING' $(LOGS_FILE) || echo 0); \
		CRITICAL_COUNT=$$(grep -c 'CRITICAL' $(LOGS_FILE) || echo 0); \
		INFO_COUNT=$$(grep -c 'INFO' $(LOGS_FILE) || echo 0); \
		\
		ERROR_THRESHOLD=5; \
		WARNING_THRESHOLD=10; \
		\
		echo "üìä M√âTRIQUES GLOBALES:"; \
		echo "---------------------"; \
		echo "üìã Total logs: $$TOTAL_LINES"; \
		echo "‚ÑπÔ∏è  Info: $$INFO_COUNT"; \
		echo "‚ö†Ô∏è  Warnings: $$WARNING_COUNT"; \
		echo "‚ùå Erreurs: $$ERROR_COUNT"; \
		echo "üö® Critiques: $$CRITICAL_COUNT"; \
		\
		if [ $$CRITICAL_COUNT -gt 0 ]; then \
			echo -e "\033[1;41müö® √âTAT: CRITIQUE\033[0m"; \
		elif [ $$ERROR_COUNT -gt $$ERROR_THRESHOLD ]; then \
			echo -e "\033[1;33m‚ùå √âTAT: PROBL√âMATIQUE\033[0m"; \
		elif [ $$WARNING_COUNT -gt $$WARNING_THRESHOLD ]; then \
			echo -e "\033[1;33m‚ö†Ô∏è  √âTAT: ATTENTION REQUISE\033[0m"; \
		else \
			echo -e "\033[1;32m‚úÖ √âTAT: SAIN\033[0m"; \
		fi; \
		echo ""; \
		\
		echo "üîß ACTIVIT√â PAR MODULE:"; \
		echo "---------------------"; \
		printf "%-20s %-10s %-10s %-10s\n" "MODULE" "TOTAL" "ERROR" "WARNING"; \
		awk -F ' - ' '{modules[$$2]++; if($$3=="ERROR") e[$$2]++; if($$3=="WARNING") w[$$2]++} \
			END {for (m in modules) printf "%-20s %-10d %-10d %-10d\n", m, modules[m], e[m]+0, w[m]+0}' $(LOGS_FILE) \
			| sort -k2 -nr; \
		\
		echo ""; \
		echo "üïê DERNI√àRE ACTIVIT√â:"; \
		echo "--------------------"; \
		tail -5 $(LOGS_FILE); \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi






logs-comparison: ## Compare les logs avant/apr√®s ($(LOGS_FILE) vs $(LOGS_FILE).old)
	@echo "üîÑ COMPARAISON DES LOGS"
	@echo "======================"
	@echo ""
	@if [ -f "$(LOGS_FILE).old" ] && [ -f "$(LOGS_FILE)" ]; then \
		OLD_LINES=$$(wc -l < $(LOGS_FILE).old); \
		NEW_LINES=$$(wc -l < $(LOGS_FILE)); \
		DIFF_LINES=$$((NEW_LINES - OLD_LINES)); \
		echo "üìä Anciennes logs: $$OLD_LINES lignes"; \
		echo "üìä Nouvelles logs: $$NEW_LINES lignes"; \
		echo "üìà Diff√©rence: $$DIFF_LINES nouvelles lignes"; \
		echo ""; \
		if [ $$DIFF_LINES -gt 0 ]; then \
			echo "üÜï NOUVELLES ENTR√âES:"; \
			echo "--------------------"; \
			tail -n $$DIFF_LINES $(LOGS_FILE); \
		else \
			echo "‚ÑπÔ∏è  Aucune nouvelle entr√©e depuis la derni√®re sauvegarde"; \
		fi; \
	else \
		echo "‚ö†Ô∏è  Fichiers de comparaison non disponibles"; \
		echo "üí° Utilisez 'make logs-clean' pour cr√©er $(LOGS_FILE).old"; \
	fi

logs-alerts: ## Alertes automatiques bas√©es sur les patterns
	@echo "üö® SYST√àME D'ALERTES AUTOMATIQUES"
	@echo "================================="
	@echo ""
	@if [ -f "$(LOGS_FILE)" ]; then \
		echo "üîç Analyse des patterns dangereux..."; \
		echo ""; \
		\
		FAILED_LOGINS=$$(grep -c "√âchec de connexion\|Invalid credentials" $(LOGS_FILE) || echo 0); \
		if [ $$FAILED_LOGINS -gt 3 ]; then \
			echo "üö® ALERTE: $$FAILED_LOGINS tentatives de connexion √©chou√©es!"; \
		fi; \
		\
		SMTP_ERRORS=$$(grep -c "ERROR.*SMTP\|ERROR.*email" $(LOGS_FILE) || echo 0); \
		if [ $$SMTP_ERRORS -gt 0 ]; then \
			echo "üìß ALERTE: $$SMTP_ERRORS erreurs d'email d√©tect√©es!"; \
		fi; \
		\
		DB_ERRORS=$$(grep -c "ERROR.*database\|ERROR.*DB" $(LOGS_FILE) || echo 0); \
		if [ $$DB_ERRORS -gt 0 ]; then \
			echo "üóÉÔ∏è  ALERTE: $$DB_ERRORS erreurs de base de donn√©es!"; \
		fi; \
		\
		RECENT_ERRORS=$$(grep "ERROR" $(LOGS_FILE) | tail -10 | wc -l); \
		if [ $$RECENT_ERRORS -gt 5 ]; then \
			echo "‚ö° ALERTE: Pic d'erreurs r√©cent ($$RECENT_ERRORS erreurs r√©centes)!"; \
		fi; \
		\
		PLUGIN_ERRORS=$$(grep -c "ERROR.*plugin\|ERROR.*Plugin" $(LOGS_FILE) || echo 0); \
		if [ $$PLUGIN_ERRORS -gt 0 ]; then \
			echo "üîå ALERTE: $$PLUGIN_ERRORS erreurs de plugins!"; \
		fi; \
		\
		if [ $$FAILED_LOGINS -eq 0 ] && [ $$SMTP_ERRORS -eq 0 ] && [ $$DB_ERRORS -eq 0 ] && [ $$RECENT_ERRORS -lt 5 ] && [ $$PLUGIN_ERRORS -eq 0 ]; then \
			echo "‚úÖ Aucune alerte d√©tect√©e - Syst√®me stable"; \
		fi; \
	else \
		echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
	fi

logs-dashboard: ## Dashboard temps r√©el avec rafra√Æchissement automatique
	@echo "üìä DASHBOARD TEMPS R√âEL"
	@echo "======================"
	@echo "üîÑ Rafra√Æchissement toutes les 5 secondes (Ctrl+C pour arr√™ter)"
	@echo ""
	@while true; do \
		clear; \
		echo "üïê $$(date '+%Y-%m-%d %H:%M:%S') - Dashboard Logs"; \
		echo "================================================"; \
		if [ -f "$(LOGS_FILE)" ]; then \
			echo "üìä STATISTIQUES:"; \
			echo "Total: $$(wc -l < $(LOGS_FILE)) | INFO: $$(grep -c 'INFO' $(LOGS_FILE) || echo 0) | WARN: $$(grep -c 'WARNING' $(LOGS_FILE) || echo 0) | ERROR: $$(grep -c 'ERROR' $(LOGS_FILE) || echo 0)"; \
			echo ""; \
			echo "üïê DERNIERS √âV√âNEMENTS:"; \
			echo "----------------------"; \
			tail -8 $(LOGS_FILE); \
			echo ""; \
			echo "üö® DERNI√àRES ERREURS:"; \
			echo "--------------------"; \
			grep "ERROR" $(LOGS_FILE) | tail -3 || echo "Aucune erreur r√©cente"; \
		else \
			echo "‚ö†Ô∏è  Fichier $(LOGS_FILE) introuvable"; \
		fi; \
		sleep 5; \
	done


# ============================================================
# üèóÔ∏è  Build & Correction automatique du code
# ============================================================

build: ## Build complet du projet (clean + install + lint-fix + format)
	@echo "üèóÔ∏è  CONSTRUCTION DU PROJET"
	@echo "==========================="
	@echo ""
	@echo "üßπ 1. Nettoyage des fichiers compil√©s..."
	@$(MAKE) clean
	@echo ""
	@echo "üì¶ 2. Installation des d√©pendances..."
	@$(MAKE) install
	@echo ""
	@echo "üîß 3. Correction automatique du code..."
	@$(MAKE) lint-fix
	@echo ""
	@echo "‚úÖ Build termin√© avec succ√®s!"

build-prod: ## Build pour production (build + tests + validation)
	@echo "üöÄ BUILD PRODUCTION"
	@echo "=================="
	@echo ""
	@$(MAKE) build
	@echo ""
	@echo "üß™ 5. Ex√©cution des tests..."
	@$(MAKE) test
	@echo ""
	@echo "üîí 6. Validation s√©curit√©..."
	@$(MAKE) security-check
	@echo ""
	@poetry build --no-cache
	@echo "üéâ Build production pr√™t!"
	

build-fast: ## Build rapide (clean + install uniquement)
	@echo "‚ö° BUILD RAPIDE"
	@echo "=============="
	@$(MAKE) clean
	@$(MAKE) install
	@echo "‚úÖ Build rapide termin√©!"

lint-fix: ## Correction automatique des erreurs de linting (SAFE - pr√©serve imports)
	@echo "üîß Correction automatique du code (mode SAFE)..."
	@echo "üìã 1. Correction autopep8 (lignes longues, espaces)..."
	@poetry run autopep8 --in-place --recursive --exclude=alembic,static,__pycache__ .
	@echo "üìã 2. Tri des imports avec isort..."
	@poetry run isort . --skip=alembic --skip=static --skip=__pycache__
	@echo "üìã 3. Formatage avec black..."
	@poetry run black . --exclude="(alembic|static|__pycache__)"
	@echo "üìã 4. Suppression CONSERVATIVE des variables inutiles (pr√©serve imports)..."
	@poetry run autoflake --in-place --recursive --remove-unused-variables --ignore-init-module-imports --exclude=alembic,static,__pycache__ .
	@echo "‚úÖ Correction automatique termin√©e (imports pr√©serv√©s)!"

auto-fix: ## Alias pour lint-fix (correction automatique s√©curis√©e)
	@$(MAKE) lint-fix

lint-preview: ## Pr√©visualiser les corrections sans les appliquer
	@echo "üëÄ Pr√©visualisation des corrections autopep8:"
	@poetry run autopep8 --diff --recursive --exclude=alembic,static,__pycache__ . | head -50
	@echo ""
	@echo "üëÄ Pr√©visualisation du formatage black:"
	@poetry run black --diff . --exclude="(alembic|static|__pycache__)" | head -30

lint-safe: ## Linting avec configuration adapt√©e √† FastHTML
	@echo "üîç V√©rification du code (compatible FastHTML)..."
	@poetry run flake8 .

test: ## Ex√©cution des tests
	@echo "üß™ Ex√©cution des tests..."
	@if [ -d "tests" ]; then \
		poetry run pytest tests/ --cov --cov-branch --cov=src --cov-report=xml; \
	else \
		echo "‚ö†Ô∏è  Dossier tests/ non trouv√©"; \
		echo "üí° Cr√©ez des tests pour am√©liorer la qualit√©"; \
		fi

security-check: ## V√©rification de s√©curit√© basique
	@echo "üîí V√©rification de s√©curit√©..."
	@echo "‚úÖ V√©rification .env (ne pas commiter)"
	@if git ls-files | grep -q "\.env$$"; then \
		echo "‚ùå ATTENTION: .env est track√© par git!"; \
	else \
		echo "‚úÖ .env correctement ignor√©"; \
	fi
	@echo "‚úÖ V√©rification des mots de passe hardcod√©s..."
	@if grep -r "password\s*=\s*[\"'][^\"']*[\"']" . --exclude-dir=.git --exclude-dir=static --exclude-dir=__pycache__ 2>/dev/null; then \
		echo "‚ùå ATTENTION: Mots de passe potentiels trouv√©s!"; \
	else \
		echo "‚úÖ Aucun mot de passe hardcod√© d√©tect√©"; \
	fi

validate: ## Validation compl√®te du projet
	@echo "‚úÖ VALIDATION DU PROJET"
	@echo "====================="
	@echo ""
	@echo "üîç 1. Syntaxe Python..."
	@poetry run python -m py_compile main.py
	@echo ""
	@echo "üì¶ 2. D√©pendances..."
	@poetry check
	@echo ""
	@echo "üîß 3. Configuration..."
	@if [ -f ".env" ]; then \
		echo "‚úÖ Fichier .env pr√©sent"; \
	else \
		echo "‚ö†Ô∏è  Fichier .env manquant"; \
	fi
	@echo ""
	@echo "‚úÖ Validation termin√©e!"


# ============================================================
# üê≥ Docker Commands
# ============================================================

docker-dev: ## Lancer l'application avec Docker (d√©veloppement avec reload)
	@echo "üê≥ Lancement Docker en mode d√©veloppement..."
	@sudo docker compose -f ./docker/docker-compose.dev.yml up --build

docker-prod: ## Lancer l'application avec Docker (production avec Gunicorn)
	@echo "üê≥ Lancement Docker en mode production..."
	@sudo docker compose -f ./docker/docker-compose.prod.yml up --build -d

docker-stop: ## Arr√™ter les conteneurs Docker
	@echo "üõë Arr√™t des conteneurs Docker..."
	@sudo docker compose down

docker-clean: ## Nettoyer les conteneurs et images Docker
	@echo "üßπ Nettoyage Docker..."
	@sudo docker compose down -v
	@sudo docker system prune -f
