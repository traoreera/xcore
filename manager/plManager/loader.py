import asyncio
import importlib
import logging
import pathlib
import pkgutil
import sys
from typing import Any, Dict, List

from manager.plManager.installer import Installer
from manager.plManager.repository import Repository
from manager.plManager.validator import Validator
from manager.schemas.plugins import Plugin
from manager.tools.error import Error


class Loader(Repository):
    """Chargeur et ex√©cuteur asynchrone des plugins (compatible FastAPI)"""

    def __init__(
        self,
        directory: str = "plugins",
        entry_point: str = "run",
        logger: logging.Logger | None = None,
        app: Any = None,
    ) -> None:
        super().__init__(logger=logger or logger)
        self.plugin_dir = pathlib.Path(directory)
        self.entry_point = entry_point
        self.active_plugins = self.get_all_active()
        self.validator = Validator()
        self.app = app

    # ------------------------------------------------------
    # üîÑ PURGE CACHE
    # ------------------------------------------------------
    def _purge_module_cache(self, base_name: str, dry_run: bool = False) -> None:
        """Nettoie sys.modules pour permettre un rechargement propre"""
        relative_name = f"{self.plugin_dir}.{base_name}"
        to_remove = [
            m
            for m in list(sys.modules)
            if m.startswith(f"{self.plugin_dir.name}.{base_name}")
            and not m.startswith(f"{relative_name}.models")
        ]

        if dry_run:
            self.logger.info(f"[DryRun] Modules qui seraient purg√©s: {to_remove}")
            return

        for m in to_remove:
            del sys.modules[m]
        if to_remove:
            self.logger.debug(f"üßπ {len(to_remove)} modules purg√©s pour {base_name}")

    # ------------------------------------------------------
    # üîç DISCOVERY
    # ------------------------------------------------------
    def _discover_plugins(self) -> List[Dict[str, str]]:
        if not self.plugin_dir.exists():
            self.logger.warning(f"‚ö†Ô∏è Dossier introuvable: {self.plugin_dir}")
            return []

        discovered = []
        for _, name, _ in pkgutil.iter_modules([str(self.plugin_dir)]):
            discovered.append(
                {
                    "name": name,
                    "module": f"{self.plugin_dir.name}.{name}.{self.entry_point}",
                    "path": str(self.plugin_dir / name),
                }
            )
        return discovered

    # ------------------------------------------------------
    # üîå CHARGEMENT
    # ------------------------------------------------------
    def load_plugins(self) -> List[Any]:
        """Importe et initialise les plugins valides"""
        loaded_plugins = []

        for plugin in self._discover_plugins():
            self._purge_module_cache(plugin["name"])
            mod = importlib.import_module(plugin["module"])

            # Validation / installation plugin
            if not any(p["name"] == plugin["name"] for p in self.active_plugins):
                self.add(
                    plugin=Plugin(
                        name=plugin["name"],
                        version=getattr(mod, "PLUGIN_INFO", {}).get(
                            "version", "unknown"
                        ),
                        author=getattr(mod, "PLUGIN_INFO", {}).get("author", "unknown"),
                        Api_prefix=getattr(mod, "PLUGIN_INFO", {}).get(
                            "Api_prefix", f"/app/{plugin['name']}"
                        ),
                        tag_for_identified=f"{getattr(mod, 'PLUGIN_INFO', {}).get('tag_for_identified', [])}",
                    )
                )
                loaded_plugins.append(mod)
                continue

            if not Validator()(mod):
                continue

            response = Installer()(path=pathlib.Path(plugin["path"]))
            loaded_plugins.append(mod)

        # üîÅ Int√©gration FastAPI
        if self.app:
            self._attach_plugins_to_app(loaded_plugins)

        return loaded_plugins

    # ------------------------------------------------------
    # ‚ö° EXECUTION ASYNCHRONE
    # ------------------------------------------------------

    async def _run_plugin_async(self, mod: Any, app: Any = None) -> None:
        """Ex√©cute la t√¢che du plugin en async si support√©"""
        instance = mod.Plugin()
        if asyncio.iscoroutinefunction(instance.concured):
            if hasattr(mod, "router") and app:
                app.include_router(mod.router)
            await instance.concured()
        else:
            loop = asyncio.get_running_loop()
            await loop.run_in_executor(None, instance.concured)
        self.logger.info(f" Plugin {mod.__name__} ex√©cut√©")

    async def run_async_plugins(self, app: Any = None):
        """Ex√©cute tous les plugins actifs en parall√®le"""
        plugins = self.load_plugins()
        tasks = [self._run_plugin_async(mod, app) for mod in plugins]

        if not tasks:
            self.logger.warning("Aucun plugin actif √† ex√©cuter.")
            return

        await asyncio.gather(*tasks)
        self.logger.info("üöÄ Tous les plugins ex√©cut√©s.")

    # ------------------------------------------------------
    # üß± FERMETURE DB
    # ------------------------------------------------------
    def close_db(self):
        self.db.close_db()

    # ------------------------------------------------------
    # ‚öôÔ∏è ATTACHEMENT AUTOMATIQUE AU CYCLE FASTAPI
    # ------------------------------------------------------

    def bind_to_fastapi(self) -> None:
        """Relie dynamiquement le chargeur au cycle de vie FastAPI."""
        if not self.app:
            self.logger.warning(
                "‚ö†Ô∏è Aucun app FastAPI d√©tect√©, impossible d'attacher le hook."
            )
            return

        @self.app.on_event("startup")
        async def _on_startup_reload_plugins() -> None:
            """Hook ex√©cut√© automatiquement au d√©marrage de FastAPI."""
            try:
                self.logger.info(
                    "üîÑ Rechargement automatique des plugins au d√©marrage..."
                )
                loaded_plugins = self.load_plugins()

                # Attache tous les routers FastAPI
                for mod in loaded_plugins:
                    try:
                        if hasattr(mod, "router"):
                            self.app.include_router(mod.router)
                            self.logger.info(f"üîó Plugin attach√© : {mod.__name__}")
                    except Exception as e:
                        self.logger.error(
                            f"‚ùå Erreur include_router({mod.__name__}): {e}"
                        )

                # Forcer la mise √† jour du sch√©ma OpenAPI
                self.app.openapi_schema = None
                openapi = self.app.openapi()
                self.logger.debug(
                    f"‚úÖ OpenAPI reg√©n√©r√© ({len(openapi.get('paths', {}))} routes)"
                )

                # Re-synchroniser la table des routes
                if hasattr(self.app.router, "routes"):
                    self.app.router.routes = list(self.app.routes)

                self.logger.info(
                    "‚úÖ Routes FastAPI et Swagger synchronis√©es apr√®s startup."
                )

            except Exception as e:
                self.logger.error(
                    f"‚ùå √âchec du rechargement des plugins au startup: {e}"
                )

    # ------------------------------------------------------
    # ‚ö° INT√âGRATION FASTAPI
    # ------------------------------------------------------

    def _attach_plugins_to_app(self, loaded_plugins: list[Any]) -> None:
        """
        Attache dynamiquement les routers des plugins √† l'application FastAPI.
        G√®re les duplications et r√©g√©n√®re OpenAPI.
        """
        if not self.app:
            return

        # --- 1Ô∏è‚É£ Sauvegarde des routes natives (FastAPI core) ---
        base_routes = list(self.app.routes)
        base_paths = {(r.path, tuple(sorted(r.methods))) for r in base_routes}

        # --- 2Ô∏è‚É£ Purge des anciennes routes plugin ---
        before = len(self.app.routes)
        self.app.routes[:] = [
            r
            for r in self.app.routes
            if (r.path, tuple(sorted(r.methods))) in base_paths
        ]
        self.app.router.routes[:] = self.app.routes
        after = len(self.app.routes)
        if before != after:
            self.logger.debug(
                f"üßπ {before - after} anciennes routes plugin supprim√©es."
            )

        # --- 3Ô∏è‚É£ Inclusion s√©curis√©e des nouveaux routers ---
        def _router_already_included(app, router):
            existing_paths = {(r.path, tuple(sorted(r.methods))) for r in app.routes}
            router_paths = {(r.path, tuple(sorted(r.methods))) for r in router.routes}
            return router_paths.issubset(existing_paths)

        for mod in loaded_plugins:
            try:
                if hasattr(mod, "router") and not _router_already_included(
                    self.app, mod.router
                ):
                    self.app.include_router(mod.router)
                    self.logger.info(f"üîó Plugin routes attach√©es : {mod.__name__}")
            except Exception as e:
                self.logger.error(f"‚ö†Ô∏è Erreur include_router pour {mod.__name__}: {e}")

        # --- 4Ô∏è‚É£ R√©g√©n√©ration du sch√©ma OpenAPI pour Swagger ---
        self.app.openapi_schema = None
        try:
            openapi = self.app.openapi()
            self.logger.debug(
                f"‚úÖ OpenAPI reg√©n√©r√© ({len(openapi.get('paths', {}))} routes)"
            )
        except Exception as e:
            self.logger.warning(f"‚ö†Ô∏è Erreur r√©g√©n√©ration OpenAPI : {e}")

        # --- 5Ô∏è‚É£ Synchronisation compl√®te du routeur FastAPI ---
        if hasattr(self.app.router, "routes"):
            self.app.router.routes[:] = list(self.app.routes)

        self.logger.info("‚úÖ Routes FastAPI et Swagger synchronis√©es.")
