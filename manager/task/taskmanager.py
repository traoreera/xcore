from apscheduler.schedulers.background import BackgroundScheduler

# Configuration du logger pour ce module
from ..plManager import logger


class TaskManager:
    """
    G√®re les t√¢ches planifi√©es avec APScheduler
    """

    def __init__(self):
        """Initialise le scheduler"""
        logger.info("üìã Initialisation du TaskManager")

        try:
            self.scheduler = BackgroundScheduler()
            self.scheduler.start()
            logger.info("‚úÖ Scheduler de t√¢ches d√©marr√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'initialisation du scheduler: {e}")
            raise

    def add_job(self, list_jobs=None):
        """
        Ajoute une liste de t√¢ches au scheduler

        :param list_jobs: liste de t√¢ches √† ajouter
        """
        if list_jobs is None:
            list_jobs = []

        logger.info(f"üìù Ajout de {len(list_jobs)} t√¢ches au scheduler")

        if not list_jobs:
            logger.warning("‚ö†Ô∏è  Aucune t√¢che √† ajouter")
            return

        successful_jobs = 0
        failed_jobs = 0

        try:
            for job in list_jobs:
                try:
                    if job.get("activate", True):
                        response = self._add_job(job)
                        if response is True:
                            successful_jobs += 1
                            logger.info(
                                f"‚úÖ T√¢che '{job.get('name', 'unknown')}' ajout√©e avec succ√®s"
                            )
                        else:
                            failed_jobs += 1
                            logger.error(
                                f"‚ùå √âchec de l'ajout de la t√¢che "
                                "'{job.get('name', 'unknown')}': {response}"
                            )
                    else:
                        logger.info(
                            f"‚è∏Ô∏è  T√¢che '{job.get('name', 'unknown')}' d√©sactiv√©e, ignor√©e"
                        )

                except Exception as e:
                    failed_jobs += 1
                    logger.error(
                        f"‚ùå Erreur lors de l'ajout de la t√¢che '{job.get('name', 'unknown')}': {e}"
                    )

            logger.info(
                f"üìä R√©sultat de l'ajout des t√¢ches: {successful_jobs} r√©ussies, {failed_jobs} √©chou√©es"
            )

        except Exception as e:
            logger.error(f"‚ùå Erreur g√©n√©rale lors de l'ajout des t√¢ches: {e}")

    def _add_job(self, job: dict):
        """
        Ajoute une t√¢che au scheduler

        :param job: t√¢che √† ajouter
        """
        job_name = job.get("name", "unknown")
        job_interval = job.get("interval", "unknown")

        logger.debug(
            f"üîß Configuration de la t√¢che '{job_name}' avec l'intervalle '{job_interval}'"
        )

        try:
            params: dict = {
                "func": job["func"],
                "trigger": job["interval"],
                "misfire_grace_time": job.get("misfire_grace_time", 30),
                "name": job_name,
                "id": job_name,
            }

            if job["interval"] == "interval":
                minutes = job.get("minutes", 10)
                params["minutes"] = minutes
                logger.debug(
                    f"‚è∞ T√¢che '{job_name}' configur√©e avec intervalle de {minutes} minutes"
                )

            elif job["interval"] == "cron":
                cron_params = job.get("cron_params", {})
                params.update(cron_params)
                logger.debug(
                    f"‚è∞ T√¢che '{job_name}' configur√©e avec cron: {cron_params}"
                )

            self.scheduler.add_job(**params)
            logger.info(f"‚úÖ T√¢che '{job_name}' ajout√©e au scheduler avec succ√®s")
            return True

        except KeyError as e:
            logger.error(f"‚ùå Param√®tre manquant pour la t√¢che '{job_name}': {e}")
            return f"Missing parameter: {e}"
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'ajout de la t√¢che '{job_name}': {e}")
            return str(e)

    def reload_jobs(self, list_jobs=None):
        """
        Recharge les t√¢ches avec les nouveaux param√®tres

        :param list_jobs: liste de t√¢ches √† recharger
        """
        if list_jobs is None:
            list_jobs = []

        logger.info(f"üîÑ Rechargement de {len(list_jobs)} t√¢ches")

        try:
            logger.info("üõë Arr√™t du scheduler actuel")
            self.scheduler.shutdown(wait=False)

            logger.info("üîß Cr√©ation d'un nouveau scheduler")
            self.scheduler = BackgroundScheduler()

            self.add_job(list_jobs)
            self.scheduler.start()

            logger.info("‚úÖ T√¢ches recharg√©es avec succ√®s")

        except Exception as e:
            logger.error(f"‚ùå Erreur lors du rechargement des t√¢ches: {e}")

    def stop(self):
        """Arr√™te le scheduler"""
        logger.info("üõë Arr√™t du TaskManager")

        try:
            self.scheduler.shutdown(wait=False)
            logger.info("‚úÖ Scheduler arr√™t√© avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t du scheduler: {e}")

    def get_jobs_info(self):
        """R√©cup√®re des informations sur les t√¢ches actives"""
        try:
            jobs = self.scheduler.get_jobs()
            jobs_info = []

            for job in jobs:
                jobs_info.append(
                    {
                        "id": job.id,
                        "name": job.name,
                        "next_run": str(job.next_run_time),
                        "trigger": str(job.trigger),
                    }
                )

            logger.info(f"üìä Informations r√©cup√©r√©es pour {len(jobs)} t√¢ches actives")
            return jobs_info

        except Exception as e:
            logger.error(
                f"‚ùå Erreur lors de la r√©cup√©ration des informations des t√¢ches: {e}"
            )
            return []





    def stopOne(self, job_id):
        try:
            self.scheduler.remove_job(job_id)
            logger.info(f"‚úÖ T√¢che '{job_id}' arr√™t√©e avec succ√®s")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'arr√™t de la t√¢che '{job_id}': {e}")

            
logger.info("üìã Module TaskManager charg√© avec succ√®s")
