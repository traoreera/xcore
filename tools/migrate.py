#!/usr/bin/env python3
"""
Database Migration Script for FastHTML App

This script provides comprehensive database migration management using Alembic.
It handles schema creation, updates, rollbacks, and migration status checking.
"""

import argparse
import logging
import os
import sys
from datetime import datetime
from typing import List, Optional

# Add the project root to Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

try:
    from sqlalchemy import create_engine, text

    from alembic import command
    from alembic.config import Config
    from alembic.runtime.migration import MigrationContext
    from alembic.script import ScriptDirectory
    from data import Base

    from .import logger,cfg
    
except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üì¶ Please install required dependencies: pip install alembic sqlalchemy")
    sys.exit(1)



class MigrationManager:
    """Gestionnaire de migrations pour core"""

    def __init__(self, config_path: str = "alembic.ini"):
        self.config_path = config_path
        self.alembic_cfg = None
        self.setup_alembic_config()

    def setup_alembic_config(self):
        """Configure Alembic"""
        try:
            self.alembic_cfg = Config(self.config_path)
            logger.info(f"‚úÖ Configuration Alembic charg√©e depuis {self.config_path}")
        except Exception as e:
            logger.error(
                f"‚ùå Erreur lors du chargement de la configuration Alembic: {e}"
            )
            raise

    def get_database_url(self) -> str:
        """R√©cup√®re l'URL de la base de donn√©es"""
        try:
            

            url = cfg.get("database", "url")
            logger.info(f"üîó URL de base de donn√©es r√©cup√©r√©e: {url[:10]}***")
            return url
        except:
            # Fallback vers les variables d'environnement
            url = None
            logger.warning(f"‚ö†Ô∏è  Utilisation de l'URL par d√©faut: {url[:10]}***")
            return url

    def create_initial_migration(self, message: str = "Initial migration") -> bool:
        """Cr√©e la migration initiale"""
        try:
            logger.info("üöÄ Cr√©ation de la migration initiale...")

            # Mettre √† jour l'URL de la base de donn√©es
            db_url = self.get_database_url()
            self.alembic_cfg.set_main_option("sqlalchemy.url", db_url)

            # G√©n√©rer la migration initiale
            command.revision(self.alembic_cfg, message=message, autogenerate=True)

            logger.info("‚úÖ Migration initiale cr√©√©e avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la cr√©ation de la migration initiale: {e}")
            return False

    def upgrade(self, revision: str = "head") -> bool:
        """Applique les migrations"""
        try:
            logger.info(f"üîÑ Application des migrations jusqu'√† {revision}...")

            # Mettre √† jour l'URL de la base de donn√©es
            db_url = self.get_database_url()
            self.alembic_cfg.set_main_option("sqlalchemy.url", db_url)

            command.upgrade(self.alembic_cfg, revision)

            logger.info("‚úÖ Migrations appliqu√©es avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'application des migrations: {e}")
            return False

    def downgrade(self, revision: str) -> bool:
        """Annule les migrations"""
        try:
            logger.info(f"üîÑ Annulation des migrations jusqu'√† {revision}...")

            # Mettre √† jour l'URL de la base de donn√©es
            db_url = self.get_database_url()
            self.alembic_cfg.set_main_option("sqlalchemy.url", db_url)

            command.downgrade(self.alembic_cfg, revision)

            logger.info("‚úÖ Migrations annul√©es avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de l'annulation des migrations: {e}")
            return False

    def current(self) -> Optional[str]:
        """Affiche la r√©vision actuelle"""
        try:
            logger.info("üìã V√©rification de la r√©vision actuelle...")

            # Mettre √† jour l'URL de la base de donn√©es
            db_url = self.get_database_url()
            engine = create_engine(db_url)

            with engine.connect() as connection:
                context = MigrationContext.configure(connection)
                current_rev = context.get_current_revision()

                if current_rev:
                    logger.info(f"üìå R√©vision actuelle: {current_rev}")
                else:
                    logger.info("üìå Aucune r√©vision appliqu√©e")

                return current_rev

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification de la r√©vision: {e}")
            return None

    def history(self) -> List[str]:
        """Affiche l'historique des migrations"""
        try:
            logger.info("üìö R√©cup√©ration de l'historique des migrations...")

            script_dir = ScriptDirectory.from_config(self.alembic_cfg)
            revisions = []

            for revision in script_dir.walk_revisions():
                revisions.append(f"{revision.revision[:8]} - {revision.doc}")

            return revisions

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la r√©cup√©ration de l'historique: {e}")
            return []

    def status(self) -> dict:
        """Affiche le statut des migrations"""
        try:
            logger.info("üìä V√©rification du statut des migrations...")

            db_url = self.get_database_url()
            engine = create_engine(db_url)

            status_info = {
                "database_url": db_url[:10] + "***",
                "current_revision": None,
                "head_revision": None,
                "pending_migrations": 0,
                "database_exists": False,
            }

            # V√©rifier si la base de donn√©es existe
            try:
                with engine.connect() as connection:
                    status_info["database_exists"] = True

                    # R√©vision actuelle
                    context = MigrationContext.configure(connection)
                    current_rev = context.get_current_revision()
                    status_info["current_revision"] = current_rev

            except Exception:
                status_info["database_exists"] = False

            # R√©vision head
            script_dir = ScriptDirectory.from_config(self.alembic_cfg)
            head_rev = script_dir.get_current_head()
            status_info["head_revision"] = head_rev

            # Migrations en attente
            if status_info["current_revision"] and status_info["head_revision"]:
                if status_info["current_revision"] != status_info["head_revision"]:
                    # Compter les migrations en attente (simplification)
                    status_info["pending_migrations"] = 1
            elif not status_info["current_revision"] and status_info["head_revision"]:
                status_info["pending_migrations"] = 1

            return status_info

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la v√©rification du statut: {e}")
            return {"error": str(e)}

    def init_database(self) -> bool:
        """Initialise la base de donn√©es si elle n'existe pas"""
        try:
            logger.info("üóÉÔ∏è  Initialisation de la base de donn√©es...")

            db_url = self.get_database_url()
            engine = create_engine(db_url)

            # Cr√©er les tables si n√©cessaire
            Base.metadata.create_all(engine)

            logger.info("‚úÖ Base de donn√©es initialis√©e")
            return True

        except Exception as e:
            logger.error(
                f"‚ùå Erreur lors de l'initialisation de la base de donn√©es: {e}"
            )
            return False

    def backup_database(self, backup_path: Optional[str] = None) -> bool:
        """Cr√©e une sauvegarde de la base de donn√©es (SQLite uniquement)"""
        try:
            db_url = self.get_database_url()

            if not db_url.startswith("sqlite:"):
                logger.warning("‚ö†Ô∏è  Sauvegarde uniquement support√©e pour SQLite")
                return False

            # Extraire le chemin du fichier SQLite
            db_file = db_url.replace("sqlite:///", "")

            if not os.path.exists(db_file):
                logger.warning(f"‚ö†Ô∏è  Base de donn√©es non trouv√©e: {db_file}")
                return False

            if not backup_path:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                backup_path = f"{db_file}.backup_{timestamp}"

            logger.info(f"üíæ Cr√©ation de la sauvegarde: {backup_path}")

            import shutil

            shutil.copy2(db_file, backup_path)

            logger.info("‚úÖ Sauvegarde cr√©√©e avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde: {e}")
            return False

    def generate_migration(self, message: str) -> bool:
        """G√©n√®re une nouvelle migration"""
        try:
            logger.info(f"üìù G√©n√©ration de la migration: {message}")

            # Mettre √† jour l'URL de la base de donn√©es
            db_url = self.get_database_url()
            self.alembic_cfg.set_main_option("sqlalchemy.url", db_url)

            command.revision(self.alembic_cfg, message=message, autogenerate=True)

            logger.info("‚úÖ Migration g√©n√©r√©e avec succ√®s")
            return True

        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la g√©n√©ration de la migration: {e}")
            return False


def print_status(status_info: dict):
    """Affiche le statut des migrations de fa√ßon format√©e"""
    print("\nüìä STATUT DES MIGRATIONS")
    print("=" * 50)

    if "error" in status_info:
        print(f"‚ùå Erreur: {status_info['error']}")
        return

    print(f"üîó Base de donn√©es: {status_info['database_url']}")
    print(f"üóÉÔ∏è  Existe: {'‚úÖ Oui' if status_info['database_exists'] else '‚ùå Non'}")
    print(f"üìå R√©vision actuelle: {status_info['current_revision'] or 'Aucune'}")
    print(f"üéØ R√©vision head: {status_info['head_revision'] or 'Aucune'}")
    print(f"‚è≥ Migrations en attente: {status_info['pending_migrations']}")

    if status_info["pending_migrations"] > 0:
        print("\n‚ö†Ô∏è  Des migrations sont en attente d'application!")
        print("üí° Utilisez 'python migrate.py upgrade' pour les appliquer")
    else:
        print("\n‚úÖ Base de donn√©es √† jour!")


def main():
    parser = argparse.ArgumentParser(
        description="Gestionnaire de migrations pour l'application FastHTML",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
    migrate init                          # Initialise la base de donn√©es
    migrate generate "Add user table"     # G√©n√®re une nouvelle migration
    migrate upgrade                       # Applique toutes les migrations
    migrate downgrade -1                  # Annule la derni√®re migration
    migrate status                        # Affiche le statut
    migrate backup                        # Cr√©e une sauvegarde
    migrate history                       # Affiche l'historique
        """,
    )

    parser.add_argument(
        "command",
        choices=[
            "init",
            "generate",
            "upgrade",
            "downgrade",
            "status",
            "current",
            "history",
            "backup",
        ],
        help="Commande √† ex√©cuter",
    )

    parser.add_argument(
        "message_or_revision",
        nargs="?",
        help="Message pour generate, r√©vision pour downgrade",
    )

    parser.add_argument(
        "--config",
        default="alembic.ini",
        help="Chemin vers le fichier de configuration Alembic (d√©faut: alembic.ini)",
    )

    parser.add_argument("--backup-path", help="Chemin pour la sauvegarde (optionnel)")

    parser.add_argument(
        "--verbose", "-v", action="store_true", help="Affichage d√©taill√©"
    )

    args = parser.parse_args()

    if args.verbose:
        logging.basicConfig(level=logging.INFO)

    try:
        manager = MigrationManager(args.config)

        if args.command == "init":
            print("üöÄ Initialisation de la base de donn√©es...")
            success = manager.init_database()
            if success:
                print("‚úÖ Base de donn√©es initialis√©e avec succ√®s!")
            else:
                print("‚ùå √âchec de l'initialisation")
                sys.exit(1)

        elif args.command == "generate":
            if not args.message_or_revision:
                print("‚ùå Message requis pour la g√©n√©ration de migration")
                sys.exit(1)

            success = manager.generate_migration(args.message_or_revision)
            if not success:
                sys.exit(1)

        elif args.command == "upgrade":
            revision = args.message_or_revision or "head"
            success = manager.upgrade(revision)
            if not success:
                sys.exit(1)

        elif args.command == "downgrade":
            if not args.message_or_revision:
                print("‚ùå R√©vision requise pour le downgrade")
                sys.exit(1)

            success = manager.downgrade(args.message_or_revision)
            if not success:
                sys.exit(1)

        elif args.command == "status":
            status_info = manager.status()
            print_status(status_info)

        elif args.command == "current":
            current_rev = manager.current()
            if current_rev:
                print(f"üìå R√©vision actuelle: {current_rev}")
            else:
                print("üìå Aucune r√©vision appliqu√©e")

        elif args.command == "history":
            revisions = manager.history()
            if revisions:
                print("\nüìö HISTORIQUE DES MIGRATIONS")
                print("=" * 50)
                for rev in reversed(revisions):
                    print(f"  {rev}")
            else:
                print("üìö Aucune migration trouv√©e")

        elif args.command == "backup":
            success = manager.backup_database(args.backup_path)
            if not success:
                sys.exit(1)

    except KeyboardInterrupt:
        print("\n‚èπÔ∏è  Op√©ration interrompue par l'utilisateur")
        sys.exit(1)
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue: {e}")
        if args.verbose:
            import traceback

            traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()
